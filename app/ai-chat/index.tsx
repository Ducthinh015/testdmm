import { useState, useRef, useEffect } from 'react';
import { Text, View, ScrollView, TouchableOpacity, TextInput, KeyboardAvoidingView, Platform } from 'react-native';
import { router } from 'expo-router';
import { commonStyles, colors } from '../../styles/commonStyles';
import Icon from '../../components/Icon';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

export default function AIChatScreen() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† AI t∆∞ v·∫•n th√∫ c∆∞ng c·ªßa DogMeoMeo. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc v·ªÅ chƒÉm s√≥c, s·ª©c kh·ªèe v√† h√†nh vi c·ªßa th√∫ c∆∞ng. B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng?',
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollViewRef = useRef<ScrollView>(null);

  const quickQuestions = [
    'Ch√≥ t√¥i b·ªã ti√™u ch·∫£y ph·∫£i l√†m sao?',
    'M√®o kh√¥ng ch·ªãu ƒÉn c√≥ sao kh√¥ng?',
    'L·ªãch ti√™m ph√≤ng cho ch√≥ con nh∆∞ th·∫ø n√†o?',
    'C√°ch hu·∫•n luy·ªán ch√≥ ƒëi v·ªá sinh ƒë√∫ng ch·ªó?',
    'Th√∫ c∆∞ng b·ªã r·ª•ng l√¥ng nhi·ªÅu c√≥ b√¨nh th∆∞·ªùng?'
  ];

  const aiResponses = {
    'ti√™u ch·∫£y': 'Ti√™u ch·∫£y ·ªü ch√≥ c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n: thay ƒë·ªïi th·ª©c ƒÉn ƒë·ªôt ng·ªôt, ƒÉn ph·∫£i th·ª© g√¨ ƒë√≥ kh√¥ng ph√π h·ª£p, stress, ho·∫∑c nhi·ªÖm tr√πng. B·∫°n n√™n:\n\n1. Cho ch√≥ nh·ªãn ƒÉn 12-24 gi·ªù (v·∫´n cho u·ªëng n∆∞·ªõc)\n2. Sau ƒë√≥ cho ƒÉn th·ª©c ƒÉn nh·∫°t nh∆∞ c∆°m tr·∫Øng + th·ªãt g√† lu·ªôc\n3. N·∫øu t√¨nh tr·∫°ng k√©o d√†i >2 ng√†y ho·∫∑c c√≥ m√°u, h√£y ƒë∆∞a ƒë·∫øn b√°c sƒ© th√∫ y ngay',
    'kh√¥ng ƒÉn': 'M√®o kh√¥ng ch·ªãu ƒÉn c√≥ th·ªÉ do:\n\n1. Stress t·ª´ m√¥i tr∆∞·ªùng m·ªõi\n2. Th·ª©c ƒÉn kh√¥ng h·ª£p kh·∫©u v·ªã\n3. V·∫•n ƒë·ªÅ s·ª©c kh·ªèe (s·ªët, ƒëau rƒÉng, etc.)\n4. Thay ƒë·ªïi th·ªùi ti·∫øt\n\nH√£y th·ª≠:\n- ƒê·ªïi lo·∫°i th·ª©c ƒÉn kh√°c\n- L√†m ·∫•m th·ª©c ƒÉn m·ªôt ch√∫t\n- T·∫°o m√¥i tr∆∞·ªùng y√™n tƒ©nh\n- N·∫øu >24h kh√¥ng ƒÉn, c·∫ßn ƒë·∫øn b√°c sƒ© th√∫ y',
    'ti√™m ph√≤ng': 'L·ªãch ti√™m ph√≤ng chu·∫©n cho ch√≥ con:\n\n6-8 tu·∫ßn: Vaccine 5 trong 1 (DHPP) + Kennel Cough\n10-12 tu·∫ßn: Vaccine 5 trong 1 l·∫ßn 2 + D·∫°i\n14-16 tu·∫ßn: Vaccine 5 trong 1 l·∫ßn 3 + D·∫°i l·∫ßn 2\n\nSau ƒë√≥ ti√™m nh·∫Øc l·∫°i h√†ng nƒÉm. L∆∞u √Ω: Kh√¥ng cho ch√≥ ra ngo√†i cho ƒë·∫øn 2 tu·∫ßn sau m≈©i cu·ªëi.',
    'hu·∫•n luy·ªán': 'Hu·∫•n luy·ªán ch√≥ ƒëi v·ªá sinh ƒë√∫ng ch·ªó:\n\n1. Ch·ªçn 1 v·ªã tr√≠ c·ªë ƒë·ªãnh\n2. ƒê∆∞a ch√≥ ƒë·∫øn ƒë√≥ sau khi ƒÉn, ng·ªß d·∫≠y\n3. Khen ng·ª£i + th∆∞·ªüng khi l√†m ƒë√∫ng\n4. Kh√¥ng la m·∫Øng khi l√†m sai, ch·ªâ d·ªçn s·∫°ch\n5. Ki√™n tr√¨ 2-4 tu·∫ßn\n\nM·∫πo: Ch√≥ th∆∞·ªùng ƒëi v·ªá sinh 15-30 ph√∫t sau khi ƒÉn',
    'r·ª•ng l√¥ng': 'R·ª•ng l√¥ng l√† hi·ªán t∆∞·ª£ng b√¨nh th∆∞·ªùng, ƒë·∫∑c bi·ªát v√†o m√πa thay l√¥ng (xu√¢n/thu). Tuy nhi√™n, n·∫øu:\n\n- R·ª•ng qu√° nhi·ªÅu, c√≥ v√πng h√≥i\n- K√®m ng·ª©a, vi√™m da\n- L√¥ng x·ªân m√†u, g√£y nhi·ªÅu\n\nC√≥ th·ªÉ do: stress, dinh d∆∞·ª°ng thi·∫øu h·ª•t, k√Ω sinh tr√πng, ho·∫∑c b·ªánh da. H√£y tƒÉng c∆∞·ªùng ch·∫£i l√¥ng v√† ƒë·∫øn b√°c sƒ© th√∫ y n·∫øu b·∫•t th∆∞·ªùng.'
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    setTimeout(() => {
      scrollViewRef.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  const sendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText.trim(),
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const response = generateAIResponse(userMessage.text);
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        isUser: false,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateAIResponse = (userText: string): string => {
    const lowerText = userText.toLowerCase();
    
    for (const [keyword, response] of Object.entries(aiResponses)) {
      if (lowerText.includes(keyword)) {
        return response;
      }
    }

    // Default responses
    const defaultResponses = [
      'C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! ƒê√¢y l√† m·ªôt c√¢u h·ªèi hay v·ªÅ chƒÉm s√≥c th√∫ c∆∞ng. T√¥i khuy√™n b·∫°n n√™n tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© th√∫ y ƒë·ªÉ c√≥ l·ªùi khuy√™n ch√≠nh x√°c nh·∫•t cho t√¨nh hu·ªëng c·ª• th·ªÉ c·ªßa th√∫ c∆∞ng.',
      'T√¥i hi·ªÉu m·ªëi quan t√¢m c·ªßa b·∫°n. M·ªói th√∫ c∆∞ng ƒë·ªÅu c√≥ ƒë·∫∑c ƒëi·ªÉm ri√™ng, v√¨ v·∫≠y t·ªët nh·∫•t b·∫°n n√™n ƒë·∫∑t l·ªãch kh√°m v·ªõi b√°c sƒ© th√∫ y ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt.',
      'ƒê√¢y l√† v·∫•n ƒë·ªÅ th∆∞·ªùng g·∫∑p trong chƒÉm s√≥c th√∫ c∆∞ng. T√¥i khuy√™n b·∫°n n√™n theo d√µi th√™m v√† li√™n h·ªá v·ªõi b√°c sƒ© th√∫ y n·∫øu t√¨nh tr·∫°ng kh√¥ng c·∫£i thi·ªán.',
    ];
    
    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
  };

  const sendQuickQuestion = (question: string) => {
    setInputText(question);
    sendMessage();
  };

  return (
    <KeyboardAvoidingView 
      style={commonStyles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      {/* Header */}
      <View style={[commonStyles.row, { paddingHorizontal: 20, paddingTop: 20, paddingBottom: 10, backgroundColor: colors.card }]}>
        <TouchableOpacity onPress={() => router.back()}>
          <Icon name="arrow-back" size={24} style={{ color: colors.text }} />
        </TouchableOpacity>
        <View style={{ flex: 1, alignItems: 'center' }}>
          <Text style={[commonStyles.subtitle, { fontSize: 18 }]}>
            AI T∆∞ v·∫•n th√∫ c∆∞ng
          </Text>
          <Text style={[commonStyles.textLight, { fontSize: 12 }]}>
            ü§ñ Tr·ª±c tuy·∫øn
          </Text>
        </View>
        <TouchableOpacity onPress={() => router.push('/ai-chat/history')}>
          <Icon name="time" size={24} style={{ color: colors.textLight }} />
        </TouchableOpacity>
      </View>

      {/* Messages */}
      <ScrollView 
        ref={scrollViewRef}
        style={[commonStyles.content, { flex: 1 }]}
        showsVerticalScrollIndicator={false}
      >
        {messages.map((message) => (
          <View
            key={message.id}
            style={[
              {
                marginVertical: 5,
                marginHorizontal: 15,
                maxWidth: '80%',
                alignSelf: message.isUser ? 'flex-end' : 'flex-start',
              }
            ]}
          >
            <View
              style={[
                {
                  backgroundColor: message.isUser ? colors.primary : colors.card,
                  borderRadius: 15,
                  padding: 12,
                  borderBottomRightRadius: message.isUser ? 5 : 15,
                  borderBottomLeftRadius: message.isUser ? 15 : 5,
                  shadowColor: colors.shadow,
                  shadowOffset: { width: 0, height: 2 },
                  shadowOpacity: 0.1,
                  shadowRadius: 4,
                  elevation: 2,
                }
              ]}
            >
              <Text
                style={[
                  commonStyles.text,
                  {
                    color: message.isUser ? 'white' : colors.text,
                    lineHeight: 20,
                  }
                ]}
              >
                {message.text}
              </Text>
            </View>
            <Text
              style={[
                commonStyles.textLight,
                {
                  fontSize: 10,
                  marginTop: 2,
                  textAlign: message.isUser ? 'right' : 'left',
                }
              ]}
            >
              {message.timestamp.toLocaleTimeString('vi-VN', { 
                hour: '2-digit', 
                minute: '2-digit' 
              })}
            </Text>
          </View>
        ))}

        {isTyping && (
          <View style={{ marginVertical: 5, marginHorizontal: 15, maxWidth: '80%' }}>
            <View style={[commonStyles.card, { borderRadius: 15, padding: 12, borderBottomLeftRadius: 5 }]}>
              <Text style={[commonStyles.textLight, { fontStyle: 'italic' }]}>
                AI ƒëang tr·∫£ l·ªùi...
              </Text>
            </View>
          </View>
        )}

        {/* Quick Questions */}
        {messages.length === 1 && (
          <View style={{ margin: 15 }}>
            <Text style={[commonStyles.textLight, { marginBottom: 10, textAlign: 'center' }]}>
              Ho·∫∑c ch·ªçn c√¢u h·ªèi th∆∞·ªùng g·∫∑p:
            </Text>
            {quickQuestions.map((question, index) => (
              <TouchableOpacity
                key={index}
                style={[commonStyles.card, { marginBottom: 8, backgroundColor: colors.backgroundAlt }]}
                onPress={() => sendQuickQuestion(question)}
              >
                <Text style={[commonStyles.text, { color: colors.primary }]}>
                  {question}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
        )}

        <View style={{ height: 20 }} />
      </ScrollView>

      {/* Input */}
      <View style={[
        commonStyles.card, 
        { 
          margin: 15, 
          flexDirection: 'row', 
          alignItems: 'center',
          paddingVertical: 10
        }
      ]}>
        <TextInput
          style={[commonStyles.text, { flex: 1, maxHeight: 100 }]}
          placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ th√∫ c∆∞ng..."
          value={inputText}
          onChangeText={setInputText}
          multiline
          placeholderTextColor={colors.textLight}
        />
        <TouchableOpacity
          onPress={sendMessage}
          disabled={!inputText.trim() || isTyping}
          style={[
            {
              backgroundColor: inputText.trim() && !isTyping ? colors.primary : colors.textLight,
              borderRadius: 20,
              width: 40,
              height: 40,
              alignItems: 'center',
              justifyContent: 'center',
              marginLeft: 10,
            }
          ]}
        >
          <Icon name="send" size={20} style={{ color: 'white' }} />
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
}